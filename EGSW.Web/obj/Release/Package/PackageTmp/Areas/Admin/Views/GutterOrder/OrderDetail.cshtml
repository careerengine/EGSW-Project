@model EGSW.Web.Areas.Admin.Models.Orders.GutterCleanOrderModel
@using EGSW.Data
@using EGSW.Data.Customers
@{
    var workContext = DependencyResolver.Current.GetService<EGSW.Data.IWorkContext>();
}


    <div>
        @if (Model.orderViewByAdmin)
        {

           @Html.ActionLink("Back to List", "List", "GutterOrder")
        }
        else
        {
            @Html.ActionLink("Back to List", "AgentOrderList", "GutterOrder")
        }
        
        
    </div>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="col-md-6">
        <div class="form-horizontal">
            <h4>Order Detail </h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)


            <div class="form-group">
                @Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DisplayFor(model => model.Id)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrderGuid, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DisplayFor(model => model.OrderGuid)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">   
                    @if (workContext.CurrentCustomer.IsAdmin())
                    {
                        <a href="@Url.Action("EditCustomer", "Customer", new { id = Model.CustomerId })">@Model.CustomerName</a>
                    } 
                    else
                    {
                        @Model.CustomerName
                    }                
                    
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.QuestionSquareFootage, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DisplayFor(model => model.QuestionSquareFootage)
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.QuestionYearBuiltStr, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">

                    @Html.DisplayFor(model => model.QuestionYearBuiltStr)
                </div>
            </div>

            <div style="border:5px solid #428bca;">

                <div class="form-group">
                    @Html.LabelFor(model => model.QuestionStyleOfGutterStr, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DisplayFor(model => model.QuestionStyleOfGutterStr)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RoofMaterial, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DisplayFor(model => model.RoofMaterial)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.QuestionDeliveryTimeStr, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DisplayFor(model => model.QuestionDeliveryTimeStr)
                    </div>
                </div>

                <div class="form-group">
                    @*@Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-4" })*@
                    <label for="Address" class="control-label col-md-4">Address to where gutters will be cleaned</label>
                    <div class="col-md-8">
                        @Html.DisplayFor(model => model.Address) 
                        @if(!string.IsNullOrWhiteSpace(Model.City))
                        {
                            <text>, </text> @Html.DisplayFor(model => model.City)

                        }
                        @if (!string.IsNullOrWhiteSpace(Model.State))
                        {
                            <text>, </text>@Html.DisplayFor(model => model.State)
                        }
                    </div>
                </div>
                @*<div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DisplayFor(model => model.City)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DisplayFor(model => model.State)
                    </div>
                </div>*@ 

                <div class="form-group">
                    @*@Html.LabelFor(model => model.Zipcode, htmlAttributes: new { @class = "control-label col-md-4" })*@
                    <label for="Zipcode" class="control-label col-md-4">Zip Code where gutters will be cleaned:</label>
                    <div class="col-md-8">
                        @Html.DisplayFor(model => model.Zipcode)
                    </div>
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.OrderStatusId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @(((OrderStatus)Model.OrderStatusId).ToString())
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PaymentStatusId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @(((PaymentStatus)Model.PaymentStatusId).ToString())
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrderTotal, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @string.Format("{0:C}", Model.OrderTotal)
                </div>
            </div>

            @if (Model.orderViewByAdmin)
            { 
            <div class="form-group">
                @Html.LabelFor(model => model.AgentId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(m => m.AgentId, Model.AvailableAgents, "Select", new { @class = "form-control" })
                    <br />

                    @if (!Model.HideSetAgentButton)
                    {
                    <input type="submit" name="setagent" value="Set Agent" class="btn btn-default" />
                    }

                </div>
            </div>
            }
            

            

            <div class="form-group">
                @Html.LabelFor(model => model.CaptureTransactionId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DisplayFor(model => model.CaptureTransactionId)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreatedOnUtc, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DisplayFor(model => model.CreatedOnUtc)
                </div>
            </div>

            @if (Model.CompletionDateUtc.HasValue)
            {

                <div class="form-group">
                    @Html.LabelFor(model => model.CompletionDateUtc, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DisplayFor(model => model.CompletionDateUtc)
                    </div>
                </div>
            }
            
            <div class="form-group">
                <div class="col-md-offset-4 col-md-8">

@if (Model.orderViewByAdmin)
            {

                    <input type="submit" value="Save" class="btn btn-default" />
}

                    @if (!Model.HideSetWorkedCompletedButton)
                    {
                    <input type="submit" name="setworkcompleted" value="Set work completed" class="btn btn-default" />
                    }
                    
                    @if (!Model.HideMarkPaidButton)
                    {
                        <input type="submit" name="setmarkpaidagent" value="Set Mark Paid Agent" class="btn btn-default" />
                    }
                </div>
            </div>
        </div>

        </div>

        
        
        
        
        
        
        
    <div class="col-md-6">

        @if(Model.ShowRating)
        { 
            <div class="form-horizontal">
                <h4>Rating </h4>
                <hr />

                @*<div class="form-group">
                    @Html.LabelFor(model => model.Question1, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        Overall, how satisfied are you with the Clean-My-Gutter service?
                        <br />
                        <b>
                        @Html.DisplayFor(model => model.Question1)
                        </b>
                    </div>
                </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.Question2, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        How would you rate the cleanliness of the Clean-My-Gutter service? 
                        <br />
                        <b> @Html.DisplayFor(model => model.Question2)</b>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Question3, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        Please indicate how quickly the work was completed from the time you ordered the service to the time the gutter service was completed? 
                        <br />
                        <b>@Html.DisplayFor(model => model.Question3)</b>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Question4, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        Did the workers who performed the Clean-My-Gutter cleaning service offer you any additional "handyman" services?
                        <br />
                        <b>@(Model.Question4=="1"?"Yes":"No")</b>
                        </div>
                </div>
                </div>
        }
        </div>
    }



